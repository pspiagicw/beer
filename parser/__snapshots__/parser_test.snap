
[TestReturn - 1]
(*ast.Program)(nil)
---

[TestReturnInteger - 1]
&ast.Program{
    Statements: {
        &ast.ReturnStatement{
            Value: &ast.Constant{Value:"1", Type:0},
        },
    },
}
---

[TestReturnBoolean - 1]
&ast.Program{
    Statements: {
        &ast.ReturnStatement{
            Value: &ast.Constant{Value:"true", Type:3},
        },
    },
}
---

[TestFunctionDefinition - 1]
&ast.Program{
    Statements: {
    },
}
---

[TestVariableAssignmentBoolean - 1]
&ast.Program{
    Statements: {
        &ast.Assignment{
            Name:  "status",
            Value: &ast.Constant{Value:"false", Type:3},
        },
    },
}
---

[TestVariableAssignmentInteger - 1]
&ast.Program{
    Statements: {
        &ast.Assignment{
            Name:  "a",
            Value: &ast.Constant{Value:"1", Type:0},
        },
    },
}
---

[TestVariableDeclarationString - 1]
&ast.Program{
    Statements: {
        &ast.VariableDeclaration{Name:"name", Type:2},
    },
}
---

[TestVariableDeclarationBoolean - 1]
&ast.Program{
    Statements: {
        &ast.VariableDeclaration{Name:"status", Type:3},
    },
}
---

[TestVariableDeclarationInteger - 1]
&ast.Program{
    Statements: {
        &ast.VariableDeclaration{Name:"a", Type:0},
    },
}
---

[TestVariableAssignmentString - 1]
&ast.Program{
    Statements: {
        &ast.Assignment{
            Name:  "name",
            Value: &ast.Constant{Value:"pspiagicw", Type:2},
        },
    },
}
---

[TestReturnString - 1]
&ast.Program{
    Statements: {
        &ast.ReturnStatement{
            Value: &ast.Constant{Value:"hello", Type:2},
        },
    },
}
---

[TestReturnFloat - 1]
&ast.Program{
    Statements: {
        &ast.ReturnStatement{
            Value: &ast.Constant{Value:"3.14", Type:1},
        },
    },
}
---

[TestReturnAdditionAndSubtraction - 1]
&ast.Program{
    Statements: {
        &ast.ReturnStatement{
            Value: &ast.BinaryExpression{
                Right:    &ast.Constant{Value:"1", Type:0},
                Operator: 12,
                Left:     &ast.BinaryExpression{
                    Right:    &ast.Constant{Value:"3", Type:0},
                    Operator: 10,
                    Left:     &ast.Constant{Value:"2", Type:0},
                },
            },
        },
    },
}
---

[TestReturnAdd - 1]
&ast.Program{
    Statements: {
        &ast.ReturnStatement{
            Value: &ast.BinaryExpression{
                Right:    &ast.Constant{Value:"2", Type:0},
                Operator: 10,
                Left:     &ast.Constant{Value:"1", Type:0},
            },
        },
    },
}
---

[TestReturnSubstract - 1]
&ast.Program{
    Statements: {
        &ast.ReturnStatement{
            Value: &ast.BinaryExpression{
                Right:    &ast.Constant{Value:"2", Type:0},
                Operator: 12,
                Left:     &ast.Constant{Value:"1", Type:0},
            },
        },
    },
}
---

[TestReturnMultiply - 1]
&ast.Program{
    Statements: {
        &ast.ReturnStatement{
            Value: &ast.BinaryExpression{
                Right:    &ast.Constant{Value:"2", Type:0},
                Operator: 11,
                Left:     &ast.Constant{Value:"1", Type:0},
            },
        },
    },
}
---

[TestReturnDivide - 1]
&ast.Program{
    Statements: {
        &ast.ReturnStatement{
            Value: &ast.BinaryExpression{
                Right:    &ast.Constant{Value:"2", Type:0},
                Operator: 13,
                Left:     &ast.Constant{Value:"1", Type:0},
            },
        },
    },
}
---

[TestReturnMultiplicationAndDivisionPrecedence - 1]
&ast.Program{
    Statements: {
        &ast.ReturnStatement{
            Value: &ast.BinaryExpression{
                Right: &ast.BinaryExpression{
                    Right:    &ast.Constant{Value:"4", Type:0},
                    Operator: 13,
                    Left:     &ast.Constant{Value:"3", Type:0},
                },
                Operator: 10,
                Left:     &ast.Constant{Value:"2", Type:0},
            },
        },
    },
}
---

[TestReturnMultipleOperatorsPrecedence - 1]
&ast.Program{
    Statements: {
        &ast.ReturnStatement{
            Value: &ast.BinaryExpression{
                Right: &ast.BinaryExpression{
                    Right:    &ast.Constant{Value:"2", Type:0},
                    Operator: 13,
                    Left:     &ast.Constant{Value:"5", Type:0},
                },
                Operator: 12,
                Left:     &ast.BinaryExpression{
                    Right: &ast.BinaryExpression{
                        Right:    &ast.Constant{Value:"4", Type:0},
                        Operator: 11,
                        Left:     &ast.Constant{Value:"3", Type:0},
                    },
                    Operator: 10,
                    Left:     &ast.Constant{Value:"2", Type:0},
                },
            },
        },
    },
}
---
